from dataclasses import dataclass, field
from enum import Enum, auto
from typing import Dict, List, Tuple, Union
from pathlib import Path


@dataclass
class Arc:
    """Representation of an arc."""

    place: str
    weight: int


@dataclass
class OutputArc(Arc):
    """Representation of an output arc."""


class InputArcTypes(Enum):
    """Definition of an input arc types."""

    REGULAR = auto()
    READ = auto()
    INHIBITOR = auto()

@dataclass
class InputArc(Arc):
    """Representation of an input arc."""

    type: InputArcTypes

    def is_met(self, tokens: int) -> bool:
        """Check if the arc preconditions are met."""
        if self.type == InputArcTypes.INHIBITOR:
            return tokens < self.weight

        return tokens >= self.weight


@dataclass
class Transition:
    """Representation of a tina arrow or equivalent
    Includes the conditions required to move.
    """

    name: str
    input_arcs: List[InputArc] = field(default_factory=list)
    output_arcs: List[OutputArc] = field(default_factory=list)

    def is_enabled(self, places: Dict[str, int]) -> bool:
        """Check if the transition is enabled, by checking each arc preconditions are met
        (ie. if there are enough tokens present at the source place)."""

        for input_arc in self.input_arcs:
            tokens = places[input_arc.place]
            if not input_arc.is_met(tokens):
                return False

        return True


def parse(
    filepath: Union[Path, str]
) -> Tuple[List[Transition], Dict[str, int]]:
    """Parse the text file generated by tina export."""

    transitions = []
    places = {}

    with open(filepath, "r") as file:
        for line in file:
            elements = (
                line.strip()
                .replace("\n", "")
                .replace("\r", "")
                .replace("{", "")
                .replace("}", "")
                .split()
            )
            if len(elements) == 0:
                continue
            elif elements[0] == "tr":
                transition = Transition(elements[1])
                arrow_index = elements.index("->")
                for element in elements[3:arrow_index]:
                    if "?" in element:
                        parts = element.split("?")
                        if int(parts[1]) > 0:
                            transition.input_arcs.append(
                                InputArc(
                                    parts[0], int(parts[1]), InputArcTypes.READ
                                )
                            )
                        else:
                            transition.input_arcs.append(
                                InputArc(
                                    parts[0],
                                    abs(int(parts[1])),
                                    InputArcTypes.INHIBITOR,
                                )
                            )
                    else:
                        parts = element.split("*")
                        if len(parts) == 1:
                            transition.input_arcs.append(
                                InputArc(parts[0], 1, InputArcTypes.REGULAR)
                            )
                        else:
                            transition.input_arcs.append(
                                InputArc(
                                    parts[0],
                                    int(parts[1]),
                                    InputArcTypes.REGULAR,
                                )
                            )
                if arrow_index + 1 != len(elements):
                    for element in elements[arrow_index + 1 :]:
                        parts = element.split("*")
                        places[parts[0]] = 0
                        if len(parts) == 1:
                            transition.output_arcs.append(
                                OutputArc(parts[0], 1)
                            )
                        else:
                            transition.output_arcs.append(
                                OutputArc(parts[0], int(parts[1]))
                            )

                transitions.append(transition)

            elif elements[0] == "pl":
                places[elements[1]] = int(
                    elements[2].replace("(", "").replace(")", "")
                )

    return transitions, places
